"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * GetLinks Backend Test
 * GetLinks backend test document
 *
 * OpenAPI spec version: 1.0.0
 * Contact: isman.usoh@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const portableFetch = require("portable-fetch");
const BASE_PATH = "http://localhost:5000/v1".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetch = portableFetch) {
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
    }
}
exports.RequiredError = RequiredError;
/**
 * AuthApi - fetch parameter creator
 * @export
 */
exports.AuthApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Exchange token to UserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authInfo(options = {}) {
            const localVarPath = `/auth/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary User login
         * @param {LoginBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling authLogin.');
            }
            const localVarPath = `/auth/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("LoginBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary User register
         * @param {RegisterBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling authRegister.');
            }
            const localVarPath = `/auth/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("RegisterBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuthApi - functional programming interface
 * @export
 */
exports.AuthApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Exchange token to UserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authInfo(options) {
            const localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).authInfo(options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary User login
         * @param {LoginBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin(body, options) {
            const localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).authLogin(body, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary User register
         * @param {RegisterBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister(body, options) {
            const localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).authRegister(body, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AuthApi - factory interface
 * @export
 */
exports.AuthApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Exchange token to UserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authInfo(options) {
            return exports.AuthApiFp(configuration).authInfo(options)(fetch, basePath);
        },
        /**
         *
         * @summary User login
         * @param {LoginBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin(body, options) {
            return exports.AuthApiFp(configuration).authLogin(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary User register
         * @param {RegisterBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister(body, options) {
            return exports.AuthApiFp(configuration).authRegister(body, options)(fetch, basePath);
        },
    };
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
class AuthApi extends BaseAPI {
    /**
     *
     * @summary Exchange token to UserInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authInfo(options) {
        return exports.AuthApiFp(this.configuration).authInfo(options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary User login
     * @param {} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authLogin(body, options) {
        return exports.AuthApiFp(this.configuration).authLogin(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary User register
     * @param {} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authRegister(body, options) {
        return exports.AuthApiFp(this.configuration).authRegister(body, options)(this.fetch, this.basePath);
    }
}
exports.AuthApi = AuthApi;
/**
 * TodoApi - fetch parameter creator
 * @export
 */
exports.TodoApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Delete todo
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoDelete(id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling todoDelete.');
            }
            const localVarPath = `/todo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List all todo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoList(options = {}) {
            const localVarPath = `/todo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create new Todo
         * @param {TodoBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoNew(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling todoNew.');
            }
            const localVarPath = `/todo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("TodoBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update todo
         * @param {number} id
         * @param {TodoBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoUpdate(id, body, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling todoUpdate.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling todoUpdate.');
            }
            const localVarPath = `/todo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("TodoBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TodoApi - functional programming interface
 * @export
 */
exports.TodoApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Delete todo
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoDelete(id, options) {
            const localVarFetchArgs = exports.TodoApiFetchParamCreator(configuration).todoDelete(id, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary List all todo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoList(options) {
            const localVarFetchArgs = exports.TodoApiFetchParamCreator(configuration).todoList(options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Create new Todo
         * @param {TodoBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoNew(body, options) {
            const localVarFetchArgs = exports.TodoApiFetchParamCreator(configuration).todoNew(body, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update todo
         * @param {number} id
         * @param {TodoBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoUpdate(id, body, options) {
            const localVarFetchArgs = exports.TodoApiFetchParamCreator(configuration).todoUpdate(id, body, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * TodoApi - factory interface
 * @export
 */
exports.TodoApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Delete todo
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoDelete(id, options) {
            return exports.TodoApiFp(configuration).todoDelete(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary List all todo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoList(options) {
            return exports.TodoApiFp(configuration).todoList(options)(fetch, basePath);
        },
        /**
         *
         * @summary Create new Todo
         * @param {TodoBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoNew(body, options) {
            return exports.TodoApiFp(configuration).todoNew(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update todo
         * @param {number} id
         * @param {TodoBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoUpdate(id, body, options) {
            return exports.TodoApiFp(configuration).todoUpdate(id, body, options)(fetch, basePath);
        },
    };
};
/**
 * TodoApi - object-oriented interface
 * @export
 * @class TodoApi
 * @extends {BaseAPI}
 */
class TodoApi extends BaseAPI {
    /**
     *
     * @summary Delete todo
     * @param {} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    todoDelete(id, options) {
        return exports.TodoApiFp(this.configuration).todoDelete(id, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary List all todo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    todoList(options) {
        return exports.TodoApiFp(this.configuration).todoList(options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Create new Todo
     * @param {} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    todoNew(body, options) {
        return exports.TodoApiFp(this.configuration).todoNew(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Update todo
     * @param {} id
     * @param {} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    todoUpdate(id, body, options) {
        return exports.TodoApiFp(this.configuration).todoUpdate(id, body, options)(this.fetch, this.basePath);
    }
}
exports.TodoApi = TodoApi;
